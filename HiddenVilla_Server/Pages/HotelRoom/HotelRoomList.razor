@page "/hotel-room"
@using Models
@using Business.Repositories.IRepositories
@inject IHotelRoomRepository hotelRoomRepository
@inject IJSRuntime jsRunTime;
@inject IFileUpload fileUpload; 

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Rooms</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sq-ft</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var room  in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("c")</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn  btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>

<DeleteConfirmation isParentComponentProcessing="isProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
    private int? DeleteRoomID { get; set; } = null;
    public bool isProcessing { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        HotelRooms = await hotelRoomRepository.GetAllHotelRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomID = roomId;
        await jsRunTime.InvokeVoidAsync("ShowDeleleteConfirmationModal");

    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        if (isConfirmed && DeleteRoomID != null)
        {
            var hotelRoom = await hotelRoomRepository.GetHotelRoom(DeleteRoomID.Value);
            foreach (var image in hotelRoom.HotelRoomImages)
            {
                fileUpload.DeleteFile(image.RoomImageUrl.Replace("RoomImages/", ""));
            }

            await hotelRoomRepository.DeleteHotelRoom(DeleteRoomID.Value);
            await jsRunTime.ToastrSuccess("Hotel room deleted successfully!!!");
            HotelRooms = await hotelRoomRepository.GetAllHotelRooms();
        }
        await jsRunTime.InvokeVoidAsync("HideDeleleteConfirmationModal");
        isProcessing = false;
    }

}
